variables:
  GITHUB_USER: emotiq
  GITHUB_REPO: emotiq
  LWPRO: lwpro
  LWPRO_MACOS_64: lwpro
  SYSTEMS: ":cosi-bls-tests :crypto-pairings :gossip-tests"

stages:
  - test
  - build
  - test_binary
  - release
  - deploy

before_script:
  - export PATH="$HOME/bin:$PATH"
  - ci/install-lisp.sh
  - ros -e '(ql-dist:install-dist
              "http://beta.quicklisp.org/dist/quicklisp/2018-01-31/distinfo.txt"
               :replace t :prompt nil)
            (ql-dist:install-dist
              "http://s3.us-east-1.amazonaws.com/emotiq-quickdist/emotiq.txt"
               :prompt nil)
            (uiop:quit 0)'

.test: &test_definition
  stage: test
  script:
    - ros -e "(when (ql:quickload :cosi-bls) (uiop:quit 0))"
    - ros -e "(when (asdf:load-system :cosi-bls) (uiop:quit 0))"
    - etc/test-harness.bash

test:linux:lispworks:
  <<: *test_definition
  tags:
    - linux
  variables:
    LISP: lispworks

test:linux:ccl:
  <<: *test_definition
  tags:
    - linux
  variables:
    LISP: ccl

# :gossip-tests stuck forever with LispWorks/macOS
test:macos:lispworks:
  <<: *test_definition
  tags:
    - macos
  variables:
    LISP: lispworks
    SYSTEMS: ":cosi-bls-tests :crypto-pairings"

test:macos:ccl:
  <<: *test_definition
  tags:
    - macos
  variables:
    LISP: ccl

.build: &build_definition
  stage: build
  variables:
    LISP: lispworks
  script:
    - etc/build.bash testing
  artifacts:
    expire_in: 1 week
    paths:
      - var/

build:linux:
  <<: *build_definition
  tags:
    - linux

build:macos:
  <<: *build_definition
  tags:
    - macos

.testbin: &testbin_definition
  stage: test_binary
  variables:
    LISP: lispworks
  script:
    - var/local/production/emotiq-$(cat var/local/production/version.txt)/emotiq.bash

test_binary:linux:
  <<: *testbin_definition
  tags:
    - linux
  dependencies:
    - build:linux

test_binary:macos:
  <<: *testbin_definition
  tags:
    - macos
  dependencies:
    - build:macos

release:
  stage: release
  tags:
    - linux
  only:
    - tags
  variables:
    LISP: ccl
  script:
    - github-release release --tag ${CI_COMMIT_TAG} -c ${CI_COMMIT_SHA} -d "${CI_COMMIT_MESSAGE}"

.deploy: &deploy_definition
  stage: deploy
  variables:
    LISP: lispworks
  script:
    - etc/production.bash
    - ci/upload-file.sh $(cat /tmp/artifact.txt)

deploy:linux:
  <<: *deploy_definition
  tags:
    - linux
  only:
    - tags

deploy:macos:
  <<: *deploy_definition
  tags:
    - macos
  only:
    - tags
